Congratulations, you found Sally! Yet as you descend to deliver the whack Aaron requested, a huge gust of wind blew you out the window!

You find yourself at the start of a maze of clouds! Oh noes! You must find you way back to the classroom to find Aaron!

The only thing you have with you is a piece of string and chalk.

Unfortunately, you are powered only by the force of the wind and it's not a very windy day! You have no idea how big the maze is...the only thing you know is what you can see in front of you.
*****
Let's be a little smarter about exploring this maze. If you're not careful with your choices you may wander the maze forever.

Once again, we are faced with a problem we don't know how to solve. So let's try and make it into smaller problems!

What are the major dangers of traversing a maze?

    (1) You can go around in loops, never realizing that you've already been there.
    (2) If you reach a fork in the road, you want to choose a path to explore - but how do you know to go back to that fork and explore the other path?

Luckily, you have two tools in your toolbox. Chalk, to mark the rooms so you know not to go in circles, and a piece of string, so you can retrace your steps$

*****
Let's first take a look at what exactly we're going to be doing.

Enter the maze.
 Check if you're at the exit
    if so, rejoyce!
    otherwise, glue down your string so you know to return.
    for each each exit out of your current room
        enter the new room.
        check if you're at the exit
        if so, rejoyce!
        otherwise, glue down your string so you know to return
        for each exit out of that room
            enter the new room
            check if you're at the exit
            if so, rejoyce!
            otherwise, glue down your string so you know to return
            for each exit out of that room
                ....etc, etc
Hmm, this is getting kind of repetitive. It looks like we're going to want to simplify this into some kind of loop.
****
So how do you represent chalk and string in code?

Chalk can be represented with a simple boolean flag. For each room, it can either be visited or not visited.

String is a little more complicated.

What do we need out of our string? We need to be able to return to exactly where we were. Also, we need to avoid the repition that we saw when we tried to write down everything we're going to do.

Have you ever been halfway through a task and wished you could pause everything - go do something else - and when you return, everything will be in the exact same spot you left it?
If you remember from the function tutorial, we can do that! Using your favorite function call, you can expect pick up exactly where you left off. Check out the function pages of the glossary if you don't remeber!
*****
OK let's build a function.
What does it need to take as parameters?
    Well, what is the only thing that changes everytime you take a step? The room!
    So let's pass the current room in as a parameter.
Where will we need to call this?
    Exactly where we would glue down our string.
*****
So we're defining our function to take in a room. 
def explore(room):
    #What's our first step?
    if the room is the exit:
        return
    else:
        for each exit to nextRoom
              explore(nextRoom)

Can you see what we've forgotten here? 
*****
We seem to have our string in place, but not the chalk!
def explore(room):
    set visited to true
    if the room is the exit:
        return
    else:
        for each exit to nextRoom
              if the next room is not visited:
                   explore(nextRoom)
So we will keep visiting rooms until we either (1) finish visiting all exits, or (2) reach the exit.
If we finish exploring all exits without finding the goal, then we will back track to the level up (where we can pick up where we left off) and finish exploring the rest of the neighbors.

This magic is called recursion!
*****
runLevel(plane)

    function def explore(room):
       room.visited=True
       if(room.goal):
          return
       else
         #glue down string
         for n in neighbors:
             if not (n.visited)
                 goto(n)
                 explore(n)
                 goto(room)
#so actually call it
    start = plane.whereami
    explore(start)
*****
