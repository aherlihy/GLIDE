Welcome to GLIDE Tutorial!

Get ready to learn the building blocks that you'll be using to write more and more complex programs.

Let's start with the most basic of concepts: variables.
Variables in programming work somewhat similar to those that you've seen in mathematics.
The idea is you want a place to store a value so that whenever you need that value, you can just go to that place. 

So how do you define a variable? 
Let's say we're at a library. We have a bunch of books and we want to keep track of how many we have at any given time.
We can define a variable, named 'number_of_books', and set it to equal the number of books we start with.
Any time someone takes or returns a book, we can add or subtract from number_of_books.
 
 ex:
    number_of_books = 10

Ta-Daaah! We now have a name that we can ask to find out how many books we have. 

What do we do when we want to add a book?
 
 ex:
    number_of_books = 11

But what happens if you leave the library for a while? Other people are coming and going, taking and returning books.
When you get back, you want to return a book but you don't know how many people have added or removed books.
The question is, if all you're doing is returning a book, do you care how many people have added books? All you need to do is make sure that the value increases by 1. 
 
 ex:
    number_of_books = number_of_books + 1

So there! We know that the variable will always have the correct number of books if everyone just adds or subtracts from the current amount when they take/return a book.
*****
So we know we can have a variable that represents a number. What else can variables represent? 

Anything you want them to! Really, we mean anything. Like you can have a variable that represents a whole other program. But we won't go there for awhile.

Variables can represent anything but they can also represent <i>nothing</i>.
    If you don't assign a variable any value, then it is automatically nothing. There is a special name for nothing, <code>None</code>.
    You have to be careful that you don't try to do anything with a variable that has a None value.
    That will result in an error :(

Variables that represent numbers can't really do anything, they're just numbers. That's why numbers are <i>Basic Types</i>, while more complicated variables are called <i>Objects</i>.

Objects in computer science have <i>attributes</i> and <i>capabilities</i>. You can think of attributes as the nouns, and capabilities as the verbs associated with any object.

For now, just assume these objects are defined elsewhere. We will get to making objects eventually, but let's learn how to use them first.
*****
<b>Attributes</b> are essentially pieces of information that the object contains.
For example, say we have an object that represents a library. What do libraries contain?
Since you are the master of this universe you can define a library to be made up of books, movies, and librarians.

You can access these variables using the following syntax:
<code>
   library.books
   library.movies
   library.librarian
</code>
You can get them or set them. In this case you can say:
<code>
   library.librarian = Kelly
</code>
*****
<b>Capabilities</b>
Capabilities are essentially the things the object can do.
For example, a librarian object could read books, answer questions, and shush people who are talking too loudly.
Capabilities change depending on what type of object you have. They are also called "Methods" and "Functions" (it's all the same stuff).

You can call these methods using the following syntax:
<code>
    librarian.shush()
</code>
Let's break down the syntax.
There are essentially 3 things you need to know about a method: the name of the method, the parameters, and the return type.

The first part of the method is the name of the variable which you're calling the method on.

<b>Parameters</b>
The parentheses are there so that you can pass some information to the librarian when you call that method.
You don't always need to pass information, for example with shush().

But let's say we want to ask the librarian a question. The librarian has a method answerQuestion, but we need a way to specify the question she should answer.
For this, we can pass parameters with the method.
<code>
    librarian.answerQuestion("What time do you close?")
</code>
We can pass basic types, objects, or nothing at all. We can also pass more than one paramter.
So if had a variable that represented a question, I could pass it directly:
<code>
    question = "What time do you open?"
    librarian.answerQuestion(question)
</code>
OK, so we've asked the librarian a question. But how do we get the answer?

<b>Return Statements</b>
When we call a method we are often asking for some information. How do we get a response from the object?

Methods can return a value. Just like parameters, methods can return basic types, objects, or nothing at all.

In this example the librarian would return the answer as a number. You want store this value, so you can just assign a variable to it.
<code>
    closing_time = librarian.answerQuestion("What time do you close?")
</code>
Now you know what time the library closes!
*****
<u>Glossary</u>:

    <b>variable</b>: essentially a place to store some information. Variables represent anything you want them to be.
    <b>basic types</b>: a value that doesn't have any capabilities or attributes other than the value it's supposed to represent.
           <b>integers</b> are basic types that represent full numbers
           <b>strings</b> are another basic type that represent text. 
    <b>objects</b>: a value that represent anything more complicated than a basic type. Objects have attributes and capabilities.
    <b>attributes</b>: information stored within an object. These are essentially variables that an object keeps track of. They can be accessed with:
         <code>variable_name.attribute_name</code>
    <b>capabilities/methods/functions</b>: abiltiies that the object is capable of. These are defined within the object and depend on the type of object.
           There are three components of a method:
                (1) <i>Name</i>
                (2) <i>Parameters</i>: information that is passed to the method. A method can take in any number of parameters.
                (3) <i>Return Value</i>: the information that the method returns to the caller. Unlike parameters, a method can only return one value but that value can be anything.
           These three components together are called the <b>method signature</b>
           Methods can be called by:
                <code>return_value = variable_name.method_name(parameter1, parameter2, ...)</code>
*****
Alright let's get this level started. What do we want you to do? Just play around.

You have one variable right now - <code>plane</code>

We're going to start you off with the simple methods of plane: 
    <code>move()</code>
         This is pretty self explanatory. When you want the plane to move forward, call move().
             parameters: empty
             return value: None
    <code>turnRight()</code>
         When you want the plane to turn to the left of where it's facing.
             parameters: empty
             return value: None 
    <code>turnLeft()</code>
         When you want the plane to turn to the right of where it's facing.
             parameters: empty
             return value: None

You will have completed the level when you can move the plane to the target!
When you input code, you can test it by pressing the check "Check Code" button. If there are errors in your code then they will show up on the right side textbox.
Once you can pass "Check Code" you can press "Run Code" and see what happens!
*****
