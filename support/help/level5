So Aaron is back inside after a hearty bout of rabble-rousing during recess.

Looking across the room, Aaron sees Sally, has fallen asleep at her desk. Knowing that Sally is already in trouble for forgetting her homework, Aaron realizes he needs to wake her up without letting his teacher find out. Aaron quickly rips a sheet out of his notebook and fashions the most versatile and awesome paper airplane known to man, YOU.

"Go, GLIDE" he whispers, "go find the student named Sally and wake her from her slumber!"
*****
Unfortunately Aaron's teacher is super evil and hates when his students have fun. 

He has assigned the students to sit in alphabetical order so that Aaron and Sally are not near each other. 

You, GLIDE, need to find which seat is Sally's without causing too much of a commotion.

You may ask roughly fewer than half the students for their names, depending on how awake the teacher is feeling.

Let's begin!!!
*****
Whenever you're faced with a problem you don't know how to solve, the first thing to do is to try and turn the problem into smaller and smaller problems until you know how to solve them. 

What if you were looking for a student C in a class of size 1? That's obvious, it would just be that student.

Now the question is: how do we get our problem, of size 20, into what we know how to solve, which is size 1?
*****
What if we had a class of size 2? That would be simple: ask one student, and if it's not that one, then its the other one.
What about size 3? This is where it gets tricky. You can't just ask each one of them, because you can only ask up to half of the class, and if you pick and random, you're not guarenteed to pick the right ones.
	     _______        _______        _______
            |       |      |       |      |       |
	    |   ?   |      |   ?   |      |   ?   |
            |_______|      |_______|      |_______|
	        1              2              3
The next step is to list the things you know to be true. 
    (1) Sally is in the class
    (2) The students are arranged alphabetically
    (3) There are 20 students, and no 2 students
        have the same name.
*****
Let's use what we know. If we pick a random student, then all the students that come before that student in line will have names that go before that student's name. All the students after that student will have names that come after that name.

Think about how you would look through a phonebook. Pick a page and see if the page you picked comes before or after the name you're looking for. If it comes before, then you can safely ignore all the names that come after, and vice versa.

Since we know that the name we want comes before the name we picked, BAM! We can throw away half the phonebook. So we now have a problem that's half as big as the one before!
*****
Let's say we're looking for a student named Eve.
So let's pick the middle.
	     _______        _______        _______
            |       |      |       |      |       |
	    |   ?   |      |  Bob  |      |   ?   |
            |_______|      |_______|      |_______|
	        1              2              3
OK, now we know Eve is not sitting in seat 2. But we also know she can't be sitting in seat 1, since alphabetically E comes after B.
What do we have left?

One student! Which is a problem we know how to solve.
*****
OK, so let's go back to a list of size 20. Let's say we name our size variable 'n'
 ___   ___   ___       ___   ___   ___ 
|   | |   | |   |     |   | |   | |   |
| ? | | ? | | ? | ... | ? | | ? | | ? |
|___| |___| |___|     |___| |___| |___| 
  1     2     3        n-2   n-1    n
    
Where do we pick for our first student? We know the total size of the class, so we know where the middle is! 

Once we know what the name of the student sitting in the middle is, we can throw away the half of the seats which we know the student isn't sitting.

What are left with? A problem of size n/2. Keep halving the size of the problem, and eventually you will get down to 1!
*****
New Methods:
    <code>plane.askName(desk_number)</code> 
          Will give you the name of the student
          who is sitting at desk_number
          Parameters: integer for desk number
          Return: string for student name. 
                  <b>IN CAPITALS</b>
Old Methods:
    <code>dropBalloon()</code>
         When you call dropWater you will release
         one of the balloons that Aaron has given
         you.
         Parameters: none
         Return: none
    <code>aboveSally()</code>
         This function will tell you if you are
         currently dropping water on Sally.
         Parameters: None
         Return: boolean
    <code>aboveStudent()</code>
         This function will tell you if you are
         currently dropping water on a student.
         Parameters: None
         Return: boolean
    <code>check()</code>
         Check tells you what is in front of the
         plane.
             parameters: empty
             return value: "AIR", "CLOUD", "TARGET"
    <code>move()</code>
         When you want the plane to move forward
             parameters: empty
             return value: None
    <code>turnRight()</code>
         When you want the plane to turn left
             parameters: empty
             return value: None 
    <code>turnLeft()</code>
         When you want the plane to turn right
             parameters: empty
             return value: None
*****
Let's get started!