GLIDE Tutorial II

Hey, you made it! So you can move, turn right, and turn left. But that's kinda limited. 
Firstly, if you wanted to get to a target that was 10 spaces ahead, then you would have to write move() 10 times.
That's called 'hardcoding' and it's bad. It's bad for two reasons: we're computer scientists and we're lazy. Writing something 10 times is annoying. Secondly, what if the wind blows and it changes the shape of the clouds? We're stuck moving forward 10 times and we're going to crash.

Luckily, plane has this awesome method <code>check()</code> which will tell you what's ahead of you. It will return a string (which if you remember is just text) representing what you're about to run into.

So what are we going to do with this method? We now have some info about our environment, but we need to <i>do</i> something with it.

We want to avoid crashing into walls. So let's only move forward if plane.check() returns AIR. How can we do different things depending on what check returns?

With an <b>if statement</b>! What does this look like?
<code>
    if(plane.check() is 'AIR'):
        plane.move()
</code>
Ta daa! Now plane.move() will only be called if you are facing air.

But what if you want turn around if plane.check is <b>not</b> air?
<code>
    if(plane.check() is 'AIR'):
        plane.move()
    else:
        plane.turnLeft()
        plane.turnLeft()
</code>

So we now have two options. But check() can return three things - how do we include a 3rd option into our if statements?
<code>
    if(plane.check() is 'AIR'):
        plane.move()
    elif(plane.check() is 'WALL'):
        plane.turnLeft()
        plane.turnLeft()
    else:
        #Rejoice! Since check didn't return 'AIR' or 'WALL', then it must have returned 'GOAL'!
</code>
You can have as many <code>elif(...)</code> statements as options you have. elif stands for "else if"
*****
<b>Things to know about if statements</b>
    **Everything inside of the if statement should be indented. Generally, everytime you see a ':' at the end of a line, you have to indent at least the next line by FOUR SPACES. No mo, no less.
    You can have if/else, if/elif/else, or if/elif/elif/<i>elif til your heart's content</i>/else 
    Every if statement takes in a <b>boolean</b>. A boolean is another basic type that represents either a true or a false value.
<code>
        (10 == 10) = True
        ("HELLO" is "GOODBYE") = False
</code>
        You can check equality, or you can check inequality!
<code>
        (10>11) = False
        (0<1000) = True
        ("POTATO" is not "POTAHTO") = False
</code>
    Just like any other basic type, you can have variables with boolean values! i.e.
<code>
        is_bigger = 10>0
</code>
    So the value stored in is_bigger will be True
*****
<u>Glossary</u>
    <b>boolean</b>: A basic type that can mean either True or False.
                    You can create a boolean using 'is' or 'is not'
                    You can also use '==' (equals) '>=' (greater or equal) '<=' (less than or equal) '<' (less than) '>' (greater than)
    <b>if statements</b>: You can execute two or more different commands depending on a boolean value.
                    Syntax:
                    <code>
                    if(boolean):
                        ...
                    elif(boolean2):
                        ...
                    else:
                        ...
                    </code>
                    The else statement covers all other possibilities that you don't define in an 'if' or 'elif'
*****
OK, so to pass this level you need to once again reach the target. But let's be a little more creative this time. Try using an if statement to make sure you're not going to run into a wall!
New methods:
    <code>check()</code>
         Check tells you what is in front of the plane.
             parameters: empty
             return value: a string with the following possible values: 'AIR', 'WALL', 'GOAL'

*****
